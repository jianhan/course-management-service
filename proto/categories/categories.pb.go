// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/categories/categories.proto

/*
Package categories is a generated protocol buffer package.

It is generated from these files:
	proto/categories/categories.proto

It has these top-level messages:
	Category
	CategoryFilterSet
	UpsertCategoriesRequest
*/
package categories

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import go_micro_srv_cm_mysql "github.com/jianhan/course-management-service/proto/mysql"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Category struct {
	// @inject_tag: bson:"_id,omitempty"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty" bson:"_id,omitempty"`
	// @inject_tag: validate:"required"
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty" validate:"required"`
	Slug string `protobuf:"bytes,3,opt,name=slug" json:"slug,omitempty"`
	// @inject_tag: validate:"required"
	Description  string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty" validate:"required"`
	DisplayOrder uint32 `protobuf:"varint,5,opt,name=display_order,json=displayOrder" json:"display_order,omitempty"`
	Visible      bool   `protobuf:"varint,6,opt,name=visible" json:"visible,omitempty"`
	// @inject_tag: bson:"created_at"
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt" json:"created_at,omitempty" bson:"created_at"`
	// @inject_tag: bson:"updated_at"
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty" bson:"updated_at"`
	Courses   map[string]string          `protobuf:"bytes,9,rep,name=courses" json:"courses,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Category) Reset()                    { *m = Category{} }
func (m *Category) String() string            { return proto.CompactTextString(m) }
func (*Category) ProtoMessage()               {}
func (*Category) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Category) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Category) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Category) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *Category) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Category) GetDisplayOrder() uint32 {
	if m != nil {
		return m.DisplayOrder
	}
	return 0
}

func (m *Category) GetVisible() bool {
	if m != nil {
		return m.Visible
	}
	return false
}

func (m *Category) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Category) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Category) GetCourses() map[string]string {
	if m != nil {
		return m.Courses
	}
	return nil
}

type CategoryFilterSet struct {
	Ids        []string                         `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
	TextSearch string                           `protobuf:"bytes,2,opt,name=text_search,json=textSearch" json:"text_search,omitempty"`
	Names      []string                         `protobuf:"bytes,3,rep,name=names" json:"names,omitempty"`
	Slugs      []string                         `protobuf:"bytes,4,rep,name=slugs" json:"slugs,omitempty"`
	Visible    *go_micro_srv_cm_mysql.BoolField `protobuf:"bytes,5,opt,name=visible" json:"visible,omitempty"`
}

func (m *CategoryFilterSet) Reset()                    { *m = CategoryFilterSet{} }
func (m *CategoryFilterSet) String() string            { return proto.CompactTextString(m) }
func (*CategoryFilterSet) ProtoMessage()               {}
func (*CategoryFilterSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CategoryFilterSet) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *CategoryFilterSet) GetTextSearch() string {
	if m != nil {
		return m.TextSearch
	}
	return ""
}

func (m *CategoryFilterSet) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *CategoryFilterSet) GetSlugs() []string {
	if m != nil {
		return m.Slugs
	}
	return nil
}

func (m *CategoryFilterSet) GetVisible() *go_micro_srv_cm_mysql.BoolField {
	if m != nil {
		return m.Visible
	}
	return nil
}

type UpsertCategoriesRequest struct {
	Categories    []*Category `protobuf:"bytes,1,rep,name=categories" json:"categories,omitempty"`
	UpsertCourses bool        `protobuf:"varint,2,opt,name=upsert_courses,json=upsertCourses" json:"upsert_courses,omitempty"`
}

func (m *UpsertCategoriesRequest) Reset()                    { *m = UpsertCategoriesRequest{} }
func (m *UpsertCategoriesRequest) String() string            { return proto.CompactTextString(m) }
func (*UpsertCategoriesRequest) ProtoMessage()               {}
func (*UpsertCategoriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UpsertCategoriesRequest) GetCategories() []*Category {
	if m != nil {
		return m.Categories
	}
	return nil
}

func (m *UpsertCategoriesRequest) GetUpsertCourses() bool {
	if m != nil {
		return m.UpsertCourses
	}
	return false
}

func init() {
	proto.RegisterType((*Category)(nil), "go.micro.srv.cm.categories.Category")
	proto.RegisterType((*CategoryFilterSet)(nil), "go.micro.srv.cm.categories.CategoryFilterSet")
	proto.RegisterType((*UpsertCategoriesRequest)(nil), "go.micro.srv.cm.categories.UpsertCategoriesRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Categories service

type CategoriesClient interface {
	UpsertCategories(ctx context.Context, in *UpsertCategoriesRequest, opts ...client.CallOption) (*go_micro_srv_cm_mysql.UpsertResult, error)
}

type categoriesClient struct {
	c           client.Client
	serviceName string
}

func NewCategoriesClient(serviceName string, c client.Client) CategoriesClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.cm.categories"
	}
	return &categoriesClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *categoriesClient) UpsertCategories(ctx context.Context, in *UpsertCategoriesRequest, opts ...client.CallOption) (*go_micro_srv_cm_mysql.UpsertResult, error) {
	req := c.c.NewRequest(c.serviceName, "Categories.UpsertCategories", in)
	out := new(go_micro_srv_cm_mysql.UpsertResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Categories service

type CategoriesHandler interface {
	UpsertCategories(context.Context, *UpsertCategoriesRequest, *go_micro_srv_cm_mysql.UpsertResult) error
}

func RegisterCategoriesHandler(s server.Server, hdlr CategoriesHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Categories{hdlr}, opts...))
}

type Categories struct {
	CategoriesHandler
}

func (h *Categories) UpsertCategories(ctx context.Context, in *UpsertCategoriesRequest, out *go_micro_srv_cm_mysql.UpsertResult) error {
	return h.CategoriesHandler.UpsertCategories(ctx, in, out)
}

func init() { proto.RegisterFile("proto/categories/categories.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 536 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xc5, 0x71, 0xd3, 0x24, 0x9b, 0xa4, 0x2a, 0x2b, 0x24, 0x56, 0xbe, 0xd4, 0xa4, 0x20, 0xe5,
	0xd2, 0xb5, 0x48, 0x2f, 0x90, 0x5b, 0x9b, 0xd2, 0x0b, 0x07, 0x24, 0x17, 0x2e, 0x5c, 0xa2, 0x8d,
	0x3d, 0x38, 0x0b, 0xb6, 0xd7, 0xdd, 0x5d, 0x47, 0x44, 0xe2, 0xcc, 0x87, 0xf0, 0x01, 0x7c, 0x23,
	0xda, 0x5d, 0xbb, 0x89, 0x40, 0x01, 0x2e, 0xd6, 0xcc, 0xdb, 0x79, 0x6f, 0xc6, 0x6f, 0x06, 0x3d,
	0xab, 0xa4, 0xd0, 0x22, 0x4a, 0x98, 0x86, 0x4c, 0x48, 0x0e, 0x6a, 0x2f, 0xa4, 0xf6, 0x0d, 0x07,
	0x99, 0xa0, 0x05, 0x4f, 0xa4, 0xa0, 0x4a, 0x6e, 0x68, 0x52, 0xd0, 0x5d, 0x45, 0x70, 0x96, 0x09,
	0x91, 0xe5, 0x10, 0xd9, 0xca, 0x55, 0xfd, 0x29, 0xd2, 0xbc, 0x00, 0xa5, 0x59, 0x51, 0x39, 0x72,
	0x70, 0x93, 0x71, 0xbd, 0xae, 0x57, 0x34, 0x11, 0x45, 0xf4, 0x99, 0xb3, 0x72, 0xcd, 0xca, 0x28,
	0x11, 0xb5, 0x54, 0x70, 0x51, 0xb0, 0x92, 0x65, 0x50, 0x40, 0xa9, 0x2f, 0x14, 0xc8, 0x0d, 0x4f,
	0x1a, 0x99, 0xa8, 0xd8, 0xaa, 0xfb, 0xdc, 0x7d, 0x9d, 0xca, 0xe4, 0x87, 0x8f, 0xfa, 0x0b, 0xd7,
	0x75, 0x8b, 0x4f, 0x50, 0x87, 0xa7, 0xc4, 0x0b, 0xbd, 0xe9, 0x20, 0xee, 0xf0, 0x14, 0x63, 0x74,
	0x54, 0xb2, 0x02, 0x48, 0xc7, 0x22, 0x36, 0x36, 0x98, 0xca, 0xeb, 0x8c, 0xf8, 0x0e, 0x33, 0x31,
	0x0e, 0xd1, 0x30, 0x05, 0x95, 0x48, 0x5e, 0x69, 0x2e, 0x4a, 0x72, 0x64, 0x9f, 0xf6, 0x21, 0x7c,
	0x8e, 0xc6, 0x29, 0x57, 0x55, 0xce, 0xb6, 0x4b, 0x21, 0x53, 0x90, 0xa4, 0x1b, 0x7a, 0xd3, 0x71,
	0x3c, 0x6a, 0xc0, 0x77, 0x06, 0xc3, 0x04, 0xf5, 0x36, 0x5c, 0xf1, 0x55, 0x0e, 0xe4, 0x38, 0xf4,
	0xa6, 0xfd, 0xb8, 0x4d, 0xf1, 0x6b, 0x84, 0x12, 0x09, 0x4c, 0x43, 0xba, 0x64, 0x9a, 0xf4, 0x42,
	0x6f, 0x3a, 0x9c, 0x05, 0xd4, 0x39, 0x44, 0x5b, 0x87, 0xe8, 0xfb, 0xd6, 0xa1, 0x78, 0xd0, 0x54,
	0x5f, 0x69, 0x43, 0xad, 0xab, 0xb4, 0xa5, 0xf6, 0xff, 0x4d, 0x6d, 0xaa, 0xaf, 0x34, 0x7e, 0x8b,
	0x7a, 0xce, 0x50, 0x45, 0x06, 0xa1, 0x3f, 0x1d, 0xce, 0x5e, 0xd2, 0xc3, 0x0b, 0xa3, 0xad, 0x8b,
	0x74, 0xe1, 0x38, 0x6f, 0x4a, 0x2d, 0xb7, 0x71, 0xab, 0x10, 0xcc, 0xd1, 0x68, 0xff, 0x01, 0x9f,
	0x22, 0xff, 0x0b, 0x6c, 0x1b, 0xb3, 0x4d, 0x88, 0x9f, 0xa0, 0xee, 0x86, 0xe5, 0x75, 0x6b, 0xb7,
	0x4b, 0xe6, 0x9d, 0x57, 0xde, 0xe4, 0xa7, 0x87, 0x1e, 0xb7, 0xf2, 0xb7, 0x3c, 0xd7, 0x20, 0xef,
	0x40, 0x1b, 0x05, 0x9e, 0x2a, 0xe2, 0x85, 0xbe, 0x51, 0xe0, 0xa9, 0xc2, 0x67, 0x68, 0xa8, 0xe1,
	0xab, 0x5e, 0x2a, 0x60, 0x32, 0x59, 0x37, 0x3a, 0xc8, 0x40, 0x77, 0x16, 0x31, 0x2d, 0xcc, 0x12,
	0x15, 0xf1, 0x2d, 0xc9, 0x25, 0x06, 0x35, 0x6b, 0x54, 0xe4, 0xc8, 0xa1, 0x36, 0xc1, 0xf3, 0xdd,
	0x36, 0xba, 0xd6, 0xb5, 0xf0, 0x8f, 0xbf, 0x77, 0x87, 0x74, 0x2d, 0x44, 0x7e, 0xcb, 0x21, 0x4f,
	0x1f, 0xf6, 0x35, 0xf9, 0xee, 0xa1, 0xa7, 0x1f, 0x2a, 0x05, 0x52, 0x2f, 0x1e, 0x0c, 0x8a, 0xe1,
	0xbe, 0x06, 0xa5, 0xf1, 0x0d, 0x42, 0x3b, 0xd7, 0xec, 0xf4, 0xc3, 0xd9, 0xf3, 0xff, 0x31, 0x36,
	0xde, 0xe3, 0xe1, 0x17, 0xe8, 0xa4, 0xb6, 0x0d, 0x96, 0xed, 0x8a, 0x3a, 0xf6, 0x64, 0xc6, 0x0e,
	0x6d, 0xac, 0x9e, 0x7d, 0x43, 0x68, 0x37, 0x01, 0x2e, 0xd1, 0xe9, 0xef, 0x53, 0xe1, 0xcb, 0xbf,
	0xb5, 0x3e, 0xf0, 0x0f, 0xc1, 0xf9, 0x01, 0x2b, 0x5c, 0x7d, 0x0c, 0xaa, 0xce, 0xf5, 0xe4, 0xd1,
	0xf5, 0xe8, 0xe3, 0xde, 0xc8, 0xab, 0x63, 0x7b, 0x6d, 0x97, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x16, 0x2c, 0xfb, 0x4e, 0x19, 0x04, 0x00, 0x00,
}
