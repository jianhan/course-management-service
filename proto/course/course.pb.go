// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/course/course.proto

/*
Package course is a generated protocol buffer package.

It is generated from these files:
	proto/course/course.proto

It has these top-level messages:
	Course
	Category
	Courses
	Result
	UpsertCoursesRequest
	UpsertCoursesResponse
	GetCoursesByFiltersResponse
	FilterSet
	BoolField
	GetCoursesByFiltersRequest
	DeleteCoursesByIDsRequest
	DeleteCoursesByIDsResponse
	CategoryFilterSet
	UpsertCategoriesRequest
	UpsertCategoriesResponse
	GetCategoriesByFiltersRequest
	GetCategoriesByFiltersResponse
	DeleteCategoriesByIDsRequest
	DeleteCategoriesByIDsResponse
	AssignCategoriesRequest
	SyncCategoriesRequest
	IDs
	AssignCategoriesResponse
	SyncCategoriesResponse
*/
package course

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Course struct {
	// @inject_tag: bson:"_id,omitempty"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty" bson:"_id,omitempty"`
	// @inject_tag: validate:"required"
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty" validate:"required"`
	Slug string `protobuf:"bytes,3,opt,name=slug" json:"slug,omitempty"`
	// @inject_tag: validate:"required"
	Description string                     `protobuf:"bytes,4,opt,name=description" json:"description,omitempty" validate:"required"`
	Visible     bool                       `protobuf:"varint,5,opt,name=visible" json:"visible,omitempty"`
	Start       *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=start" json:"start,omitempty"`
	End         *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=end" json:"end,omitempty"`
	// @inject_tag: bson:"created_at"
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt" json:"created_at,omitempty" bson:"created_at"`
	// @inject_tag: bson:"updated_at"
	UpdatedAt  *google_protobuf.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty" bson:"updated_at"`
	Order      uint32                     `protobuf:"varint,10,opt,name=order" json:"order,omitempty"`
	Categories []string                   `protobuf:"bytes,11,rep,name=categories" json:"categories,omitempty"`
}

func (m *Course) Reset()                    { *m = Course{} }
func (m *Course) String() string            { return proto.CompactTextString(m) }
func (*Course) ProtoMessage()               {}
func (*Course) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Course) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Course) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Course) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *Course) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Course) GetVisible() bool {
	if m != nil {
		return m.Visible
	}
	return false
}

func (m *Course) GetStart() *google_protobuf.Timestamp {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *Course) GetEnd() *google_protobuf.Timestamp {
	if m != nil {
		return m.End
	}
	return nil
}

func (m *Course) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Course) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Course) GetOrder() uint32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *Course) GetCategories() []string {
	if m != nil {
		return m.Categories
	}
	return nil
}

type Category struct {
	// @inject_tag: bson:"_id,omitempty"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty" bson:"_id,omitempty"`
	// @inject_tag: validate:"required"
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty" validate:"required"`
	Slug string `protobuf:"bytes,3,opt,name=slug" json:"slug,omitempty"`
	// @inject_tag: validate:"required"
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty" validate:"required"`
	Order       uint32 `protobuf:"varint,5,opt,name=order" json:"order,omitempty"`
	Visible     bool   `protobuf:"varint,6,opt,name=visible" json:"visible,omitempty"`
	// @inject_tag: bson:"created_at"
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt" json:"created_at,omitempty" bson:"created_at"`
	// @inject_tag: bson:"updated_at"
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty" bson:"updated_at"`
}

func (m *Category) Reset()                    { *m = Category{} }
func (m *Category) String() string            { return proto.CompactTextString(m) }
func (*Category) ProtoMessage()               {}
func (*Category) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Category) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Category) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Category) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *Category) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Category) GetOrder() uint32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *Category) GetVisible() bool {
	if m != nil {
		return m.Visible
	}
	return false
}

func (m *Category) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Category) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type Courses struct {
	Courses []*Course `protobuf:"bytes,1,rep,name=courses" json:"courses,omitempty"`
}

func (m *Courses) Reset()                    { *m = Courses{} }
func (m *Courses) String() string            { return proto.CompactTextString(m) }
func (*Courses) ProtoMessage()               {}
func (*Courses) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Courses) GetCourses() []*Course {
	if m != nil {
		return m.Courses
	}
	return nil
}

type Result struct {
	RowsEffected uint64 `protobuf:"varint,1,opt,name=rows_effected,json=rowsEffected" json:"rows_effected,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Result) GetRowsEffected() uint64 {
	if m != nil {
		return m.RowsEffected
	}
	return 0
}

type UpsertCoursesRequest struct {
	Courses []*Course `protobuf:"bytes,1,rep,name=courses" json:"courses,omitempty"`
}

func (m *UpsertCoursesRequest) Reset()                    { *m = UpsertCoursesRequest{} }
func (m *UpsertCoursesRequest) String() string            { return proto.CompactTextString(m) }
func (*UpsertCoursesRequest) ProtoMessage()               {}
func (*UpsertCoursesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpsertCoursesRequest) GetCourses() []*Course {
	if m != nil {
		return m.Courses
	}
	return nil
}

type UpsertCoursesResponse struct {
	Updated  uint32 `protobuf:"varint,1,opt,name=updated" json:"updated,omitempty"`
	Inserted uint32 `protobuf:"varint,2,opt,name=inserted" json:"inserted,omitempty"`
}

func (m *UpsertCoursesResponse) Reset()                    { *m = UpsertCoursesResponse{} }
func (m *UpsertCoursesResponse) String() string            { return proto.CompactTextString(m) }
func (*UpsertCoursesResponse) ProtoMessage()               {}
func (*UpsertCoursesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UpsertCoursesResponse) GetUpdated() uint32 {
	if m != nil {
		return m.Updated
	}
	return 0
}

func (m *UpsertCoursesResponse) GetInserted() uint32 {
	if m != nil {
		return m.Inserted
	}
	return 0
}

type GetCoursesByFiltersResponse struct {
	Courses []*Course `protobuf:"bytes,1,rep,name=courses" json:"courses,omitempty"`
}

func (m *GetCoursesByFiltersResponse) Reset()                    { *m = GetCoursesByFiltersResponse{} }
func (m *GetCoursesByFiltersResponse) String() string            { return proto.CompactTextString(m) }
func (*GetCoursesByFiltersResponse) ProtoMessage()               {}
func (*GetCoursesByFiltersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetCoursesByFiltersResponse) GetCourses() []*Course {
	if m != nil {
		return m.Courses
	}
	return nil
}

type FilterSet struct {
	Ids        []string                   `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
	TextSearch string                     `protobuf:"bytes,2,opt,name=text_search,json=textSearch" json:"text_search,omitempty"`
	Names      []string                   `protobuf:"bytes,3,rep,name=names" json:"names,omitempty"`
	Slugs      []string                   `protobuf:"bytes,4,rep,name=slugs" json:"slugs,omitempty"`
	Start      *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=start" json:"start,omitempty"`
	End        *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=end" json:"end,omitempty"`
	Visible    *BoolField                 `protobuf:"bytes,7,opt,name=visible" json:"visible,omitempty"`
}

func (m *FilterSet) Reset()                    { *m = FilterSet{} }
func (m *FilterSet) String() string            { return proto.CompactTextString(m) }
func (*FilterSet) ProtoMessage()               {}
func (*FilterSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *FilterSet) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *FilterSet) GetTextSearch() string {
	if m != nil {
		return m.TextSearch
	}
	return ""
}

func (m *FilterSet) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *FilterSet) GetSlugs() []string {
	if m != nil {
		return m.Slugs
	}
	return nil
}

func (m *FilterSet) GetStart() *google_protobuf.Timestamp {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *FilterSet) GetEnd() *google_protobuf.Timestamp {
	if m != nil {
		return m.End
	}
	return nil
}

func (m *FilterSet) GetVisible() *BoolField {
	if m != nil {
		return m.Visible
	}
	return nil
}

type BoolField struct {
	Value  bool `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	Ignore bool `protobuf:"varint,2,opt,name=ignore" json:"ignore,omitempty"`
}

func (m *BoolField) Reset()                    { *m = BoolField{} }
func (m *BoolField) String() string            { return proto.CompactTextString(m) }
func (*BoolField) ProtoMessage()               {}
func (*BoolField) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *BoolField) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

func (m *BoolField) GetIgnore() bool {
	if m != nil {
		return m.Ignore
	}
	return false
}

type GetCoursesByFiltersRequest struct {
	FilterSet *FilterSet `protobuf:"bytes,1,opt,name=filter_set,json=filterSet" json:"filter_set,omitempty"`
}

func (m *GetCoursesByFiltersRequest) Reset()                    { *m = GetCoursesByFiltersRequest{} }
func (m *GetCoursesByFiltersRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCoursesByFiltersRequest) ProtoMessage()               {}
func (*GetCoursesByFiltersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetCoursesByFiltersRequest) GetFilterSet() *FilterSet {
	if m != nil {
		return m.FilterSet
	}
	return nil
}

type DeleteCoursesByIDsRequest struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *DeleteCoursesByIDsRequest) Reset()                    { *m = DeleteCoursesByIDsRequest{} }
func (m *DeleteCoursesByIDsRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteCoursesByIDsRequest) ProtoMessage()               {}
func (*DeleteCoursesByIDsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DeleteCoursesByIDsRequest) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type DeleteCoursesByIDsResponse struct {
	Removed uint32 `protobuf:"varint,1,opt,name=removed" json:"removed,omitempty"`
}

func (m *DeleteCoursesByIDsResponse) Reset()                    { *m = DeleteCoursesByIDsResponse{} }
func (m *DeleteCoursesByIDsResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteCoursesByIDsResponse) ProtoMessage()               {}
func (*DeleteCoursesByIDsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DeleteCoursesByIDsResponse) GetRemoved() uint32 {
	if m != nil {
		return m.Removed
	}
	return 0
}

type CategoryFilterSet struct {
	Ids        []string   `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
	TextSearch string     `protobuf:"bytes,2,opt,name=text_search,json=textSearch" json:"text_search,omitempty"`
	Names      []string   `protobuf:"bytes,3,rep,name=names" json:"names,omitempty"`
	Slugs      []string   `protobuf:"bytes,4,rep,name=slugs" json:"slugs,omitempty"`
	Visible    *BoolField `protobuf:"bytes,5,opt,name=visible" json:"visible,omitempty"`
}

func (m *CategoryFilterSet) Reset()                    { *m = CategoryFilterSet{} }
func (m *CategoryFilterSet) String() string            { return proto.CompactTextString(m) }
func (*CategoryFilterSet) ProtoMessage()               {}
func (*CategoryFilterSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CategoryFilterSet) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *CategoryFilterSet) GetTextSearch() string {
	if m != nil {
		return m.TextSearch
	}
	return ""
}

func (m *CategoryFilterSet) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *CategoryFilterSet) GetSlugs() []string {
	if m != nil {
		return m.Slugs
	}
	return nil
}

func (m *CategoryFilterSet) GetVisible() *BoolField {
	if m != nil {
		return m.Visible
	}
	return nil
}

type UpsertCategoriesRequest struct {
	Categories []*Category `protobuf:"bytes,1,rep,name=categories" json:"categories,omitempty"`
}

func (m *UpsertCategoriesRequest) Reset()                    { *m = UpsertCategoriesRequest{} }
func (m *UpsertCategoriesRequest) String() string            { return proto.CompactTextString(m) }
func (*UpsertCategoriesRequest) ProtoMessage()               {}
func (*UpsertCategoriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *UpsertCategoriesRequest) GetCategories() []*Category {
	if m != nil {
		return m.Categories
	}
	return nil
}

type UpsertCategoriesResponse struct {
	Updated  uint32 `protobuf:"varint,1,opt,name=updated" json:"updated,omitempty"`
	Inserted uint32 `protobuf:"varint,2,opt,name=inserted" json:"inserted,omitempty"`
}

func (m *UpsertCategoriesResponse) Reset()                    { *m = UpsertCategoriesResponse{} }
func (m *UpsertCategoriesResponse) String() string            { return proto.CompactTextString(m) }
func (*UpsertCategoriesResponse) ProtoMessage()               {}
func (*UpsertCategoriesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *UpsertCategoriesResponse) GetUpdated() uint32 {
	if m != nil {
		return m.Updated
	}
	return 0
}

func (m *UpsertCategoriesResponse) GetInserted() uint32 {
	if m != nil {
		return m.Inserted
	}
	return 0
}

type GetCategoriesByFiltersRequest struct {
	FilterSet *CategoryFilterSet `protobuf:"bytes,1,opt,name=filter_set,json=filterSet" json:"filter_set,omitempty"`
}

func (m *GetCategoriesByFiltersRequest) Reset()                    { *m = GetCategoriesByFiltersRequest{} }
func (m *GetCategoriesByFiltersRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCategoriesByFiltersRequest) ProtoMessage()               {}
func (*GetCategoriesByFiltersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GetCategoriesByFiltersRequest) GetFilterSet() *CategoryFilterSet {
	if m != nil {
		return m.FilterSet
	}
	return nil
}

type GetCategoriesByFiltersResponse struct {
	Categories []*Category `protobuf:"bytes,1,rep,name=categories" json:"categories,omitempty"`
}

func (m *GetCategoriesByFiltersResponse) Reset()                    { *m = GetCategoriesByFiltersResponse{} }
func (m *GetCategoriesByFiltersResponse) String() string            { return proto.CompactTextString(m) }
func (*GetCategoriesByFiltersResponse) ProtoMessage()               {}
func (*GetCategoriesByFiltersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GetCategoriesByFiltersResponse) GetCategories() []*Category {
	if m != nil {
		return m.Categories
	}
	return nil
}

type DeleteCategoriesByIDsRequest struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *DeleteCategoriesByIDsRequest) Reset()                    { *m = DeleteCategoriesByIDsRequest{} }
func (m *DeleteCategoriesByIDsRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteCategoriesByIDsRequest) ProtoMessage()               {}
func (*DeleteCategoriesByIDsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *DeleteCategoriesByIDsRequest) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type DeleteCategoriesByIDsResponse struct {
	Removed uint32 `protobuf:"varint,1,opt,name=removed" json:"removed,omitempty"`
}

func (m *DeleteCategoriesByIDsResponse) Reset()                    { *m = DeleteCategoriesByIDsResponse{} }
func (m *DeleteCategoriesByIDsResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteCategoriesByIDsResponse) ProtoMessage()               {}
func (*DeleteCategoriesByIDsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *DeleteCategoriesByIDsResponse) GetRemoved() uint32 {
	if m != nil {
		return m.Removed
	}
	return 0
}

type AssignCategoriesRequest struct {
	CourseIdWithCategoryIds map[string]*IDs `protobuf:"bytes,1,rep,name=course_id_with_category_ids,json=courseIdWithCategoryIds" json:"course_id_with_category_ids,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AssignCategoriesRequest) Reset()                    { *m = AssignCategoriesRequest{} }
func (m *AssignCategoriesRequest) String() string            { return proto.CompactTextString(m) }
func (*AssignCategoriesRequest) ProtoMessage()               {}
func (*AssignCategoriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *AssignCategoriesRequest) GetCourseIdWithCategoryIds() map[string]*IDs {
	if m != nil {
		return m.CourseIdWithCategoryIds
	}
	return nil
}

type SyncCategoriesRequest struct {
	CourseIdWithCategoryIds map[string]*IDs `protobuf:"bytes,1,rep,name=course_id_with_category_ids,json=courseIdWithCategoryIds" json:"course_id_with_category_ids,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SyncCategoriesRequest) Reset()                    { *m = SyncCategoriesRequest{} }
func (m *SyncCategoriesRequest) String() string            { return proto.CompactTextString(m) }
func (*SyncCategoriesRequest) ProtoMessage()               {}
func (*SyncCategoriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *SyncCategoriesRequest) GetCourseIdWithCategoryIds() map[string]*IDs {
	if m != nil {
		return m.CourseIdWithCategoryIds
	}
	return nil
}

type IDs struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *IDs) Reset()                    { *m = IDs{} }
func (m *IDs) String() string            { return proto.CompactTextString(m) }
func (*IDs) ProtoMessage()               {}
func (*IDs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *IDs) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type AssignCategoriesResponse struct {
	Updated uint32 `protobuf:"varint,1,opt,name=updated" json:"updated,omitempty"`
}

func (m *AssignCategoriesResponse) Reset()                    { *m = AssignCategoriesResponse{} }
func (m *AssignCategoriesResponse) String() string            { return proto.CompactTextString(m) }
func (*AssignCategoriesResponse) ProtoMessage()               {}
func (*AssignCategoriesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *AssignCategoriesResponse) GetUpdated() uint32 {
	if m != nil {
		return m.Updated
	}
	return 0
}

type SyncCategoriesResponse struct {
	Updated uint32 `protobuf:"varint,1,opt,name=updated" json:"updated,omitempty"`
}

func (m *SyncCategoriesResponse) Reset()                    { *m = SyncCategoriesResponse{} }
func (m *SyncCategoriesResponse) String() string            { return proto.CompactTextString(m) }
func (*SyncCategoriesResponse) ProtoMessage()               {}
func (*SyncCategoriesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *SyncCategoriesResponse) GetUpdated() uint32 {
	if m != nil {
		return m.Updated
	}
	return 0
}

func init() {
	proto.RegisterType((*Course)(nil), "go_micro_srv_course.Course")
	proto.RegisterType((*Category)(nil), "go_micro_srv_course.Category")
	proto.RegisterType((*Courses)(nil), "go_micro_srv_course.Courses")
	proto.RegisterType((*Result)(nil), "go_micro_srv_course.Result")
	proto.RegisterType((*UpsertCoursesRequest)(nil), "go_micro_srv_course.UpsertCoursesRequest")
	proto.RegisterType((*UpsertCoursesResponse)(nil), "go_micro_srv_course.UpsertCoursesResponse")
	proto.RegisterType((*GetCoursesByFiltersResponse)(nil), "go_micro_srv_course.GetCoursesByFiltersResponse")
	proto.RegisterType((*FilterSet)(nil), "go_micro_srv_course.FilterSet")
	proto.RegisterType((*BoolField)(nil), "go_micro_srv_course.BoolField")
	proto.RegisterType((*GetCoursesByFiltersRequest)(nil), "go_micro_srv_course.GetCoursesByFiltersRequest")
	proto.RegisterType((*DeleteCoursesByIDsRequest)(nil), "go_micro_srv_course.DeleteCoursesByIDsRequest")
	proto.RegisterType((*DeleteCoursesByIDsResponse)(nil), "go_micro_srv_course.DeleteCoursesByIDsResponse")
	proto.RegisterType((*CategoryFilterSet)(nil), "go_micro_srv_course.CategoryFilterSet")
	proto.RegisterType((*UpsertCategoriesRequest)(nil), "go_micro_srv_course.UpsertCategoriesRequest")
	proto.RegisterType((*UpsertCategoriesResponse)(nil), "go_micro_srv_course.UpsertCategoriesResponse")
	proto.RegisterType((*GetCategoriesByFiltersRequest)(nil), "go_micro_srv_course.GetCategoriesByFiltersRequest")
	proto.RegisterType((*GetCategoriesByFiltersResponse)(nil), "go_micro_srv_course.GetCategoriesByFiltersResponse")
	proto.RegisterType((*DeleteCategoriesByIDsRequest)(nil), "go_micro_srv_course.DeleteCategoriesByIDsRequest")
	proto.RegisterType((*DeleteCategoriesByIDsResponse)(nil), "go_micro_srv_course.DeleteCategoriesByIDsResponse")
	proto.RegisterType((*AssignCategoriesRequest)(nil), "go_micro_srv_course.AssignCategoriesRequest")
	proto.RegisterType((*SyncCategoriesRequest)(nil), "go_micro_srv_course.SyncCategoriesRequest")
	proto.RegisterType((*IDs)(nil), "go_micro_srv_course.IDs")
	proto.RegisterType((*AssignCategoriesResponse)(nil), "go_micro_srv_course.AssignCategoriesResponse")
	proto.RegisterType((*SyncCategoriesResponse)(nil), "go_micro_srv_course.SyncCategoriesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CourseManager service

type CourseManagerClient interface {
	// Courses
	UpsertCourses(ctx context.Context, in *UpsertCoursesRequest, opts ...client.CallOption) (*UpsertCoursesResponse, error)
	GetCoursesByFilters(ctx context.Context, in *GetCoursesByFiltersRequest, opts ...client.CallOption) (*GetCoursesByFiltersResponse, error)
	DeleteCoursesByIDs(ctx context.Context, in *DeleteCoursesByIDsRequest, opts ...client.CallOption) (*DeleteCoursesByIDsResponse, error)
	// Categories
	UpsertCategories(ctx context.Context, in *UpsertCategoriesRequest, opts ...client.CallOption) (*UpsertCategoriesResponse, error)
	GetCategoriesByFilters(ctx context.Context, in *GetCategoriesByFiltersRequest, opts ...client.CallOption) (*GetCategoriesByFiltersResponse, error)
	DeleteCategoriesByIDs(ctx context.Context, in *DeleteCategoriesByIDsRequest, opts ...client.CallOption) (*DeleteCategoriesByIDsResponse, error)
	// Courses and categories
	AssignCategories(ctx context.Context, in *AssignCategoriesRequest, opts ...client.CallOption) (*AssignCategoriesResponse, error)
	SyncCategories(ctx context.Context, in *SyncCategoriesRequest, opts ...client.CallOption) (*SyncCategoriesResponse, error)
}

type courseManagerClient struct {
	c           client.Client
	serviceName string
}

func NewCourseManagerClient(serviceName string, c client.Client) CourseManagerClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go_micro_srv_course"
	}
	return &courseManagerClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *courseManagerClient) UpsertCourses(ctx context.Context, in *UpsertCoursesRequest, opts ...client.CallOption) (*UpsertCoursesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "CourseManager.UpsertCourses", in)
	out := new(UpsertCoursesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseManagerClient) GetCoursesByFilters(ctx context.Context, in *GetCoursesByFiltersRequest, opts ...client.CallOption) (*GetCoursesByFiltersResponse, error) {
	req := c.c.NewRequest(c.serviceName, "CourseManager.GetCoursesByFilters", in)
	out := new(GetCoursesByFiltersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseManagerClient) DeleteCoursesByIDs(ctx context.Context, in *DeleteCoursesByIDsRequest, opts ...client.CallOption) (*DeleteCoursesByIDsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "CourseManager.DeleteCoursesByIDs", in)
	out := new(DeleteCoursesByIDsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseManagerClient) UpsertCategories(ctx context.Context, in *UpsertCategoriesRequest, opts ...client.CallOption) (*UpsertCategoriesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "CourseManager.UpsertCategories", in)
	out := new(UpsertCategoriesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseManagerClient) GetCategoriesByFilters(ctx context.Context, in *GetCategoriesByFiltersRequest, opts ...client.CallOption) (*GetCategoriesByFiltersResponse, error) {
	req := c.c.NewRequest(c.serviceName, "CourseManager.GetCategoriesByFilters", in)
	out := new(GetCategoriesByFiltersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseManagerClient) DeleteCategoriesByIDs(ctx context.Context, in *DeleteCategoriesByIDsRequest, opts ...client.CallOption) (*DeleteCategoriesByIDsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "CourseManager.DeleteCategoriesByIDs", in)
	out := new(DeleteCategoriesByIDsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseManagerClient) AssignCategories(ctx context.Context, in *AssignCategoriesRequest, opts ...client.CallOption) (*AssignCategoriesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "CourseManager.AssignCategories", in)
	out := new(AssignCategoriesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseManagerClient) SyncCategories(ctx context.Context, in *SyncCategoriesRequest, opts ...client.CallOption) (*SyncCategoriesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "CourseManager.SyncCategories", in)
	out := new(SyncCategoriesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CourseManager service

type CourseManagerHandler interface {
	// Courses
	UpsertCourses(context.Context, *UpsertCoursesRequest, *UpsertCoursesResponse) error
	GetCoursesByFilters(context.Context, *GetCoursesByFiltersRequest, *GetCoursesByFiltersResponse) error
	DeleteCoursesByIDs(context.Context, *DeleteCoursesByIDsRequest, *DeleteCoursesByIDsResponse) error
	// Categories
	UpsertCategories(context.Context, *UpsertCategoriesRequest, *UpsertCategoriesResponse) error
	GetCategoriesByFilters(context.Context, *GetCategoriesByFiltersRequest, *GetCategoriesByFiltersResponse) error
	DeleteCategoriesByIDs(context.Context, *DeleteCategoriesByIDsRequest, *DeleteCategoriesByIDsResponse) error
	// Courses and categories
	AssignCategories(context.Context, *AssignCategoriesRequest, *AssignCategoriesResponse) error
	SyncCategories(context.Context, *SyncCategoriesRequest, *SyncCategoriesResponse) error
}

func RegisterCourseManagerHandler(s server.Server, hdlr CourseManagerHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&CourseManager{hdlr}, opts...))
}

type CourseManager struct {
	CourseManagerHandler
}

func (h *CourseManager) UpsertCourses(ctx context.Context, in *UpsertCoursesRequest, out *UpsertCoursesResponse) error {
	return h.CourseManagerHandler.UpsertCourses(ctx, in, out)
}

func (h *CourseManager) GetCoursesByFilters(ctx context.Context, in *GetCoursesByFiltersRequest, out *GetCoursesByFiltersResponse) error {
	return h.CourseManagerHandler.GetCoursesByFilters(ctx, in, out)
}

func (h *CourseManager) DeleteCoursesByIDs(ctx context.Context, in *DeleteCoursesByIDsRequest, out *DeleteCoursesByIDsResponse) error {
	return h.CourseManagerHandler.DeleteCoursesByIDs(ctx, in, out)
}

func (h *CourseManager) UpsertCategories(ctx context.Context, in *UpsertCategoriesRequest, out *UpsertCategoriesResponse) error {
	return h.CourseManagerHandler.UpsertCategories(ctx, in, out)
}

func (h *CourseManager) GetCategoriesByFilters(ctx context.Context, in *GetCategoriesByFiltersRequest, out *GetCategoriesByFiltersResponse) error {
	return h.CourseManagerHandler.GetCategoriesByFilters(ctx, in, out)
}

func (h *CourseManager) DeleteCategoriesByIDs(ctx context.Context, in *DeleteCategoriesByIDsRequest, out *DeleteCategoriesByIDsResponse) error {
	return h.CourseManagerHandler.DeleteCategoriesByIDs(ctx, in, out)
}

func (h *CourseManager) AssignCategories(ctx context.Context, in *AssignCategoriesRequest, out *AssignCategoriesResponse) error {
	return h.CourseManagerHandler.AssignCategories(ctx, in, out)
}

func (h *CourseManager) SyncCategories(ctx context.Context, in *SyncCategoriesRequest, out *SyncCategoriesResponse) error {
	return h.CourseManagerHandler.SyncCategories(ctx, in, out)
}

func init() { proto.RegisterFile("proto/course/course.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1021 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x5b, 0x6f, 0x1b, 0x45,
	0x14, 0xee, 0xda, 0xf1, 0xed, 0x18, 0x57, 0x65, 0xda, 0x24, 0xdb, 0x4d, 0x93, 0x5a, 0x8b, 0x84,
	0x4c, 0x69, 0xec, 0xe0, 0x02, 0x4a, 0x90, 0x90, 0x48, 0x9a, 0xb4, 0xf2, 0x43, 0x24, 0xb4, 0x29,
	0x02, 0xc1, 0xc3, 0x6a, 0xb3, 0x3b, 0x76, 0x46, 0x5d, 0xef, 0xba, 0x33, 0xe3, 0x04, 0xf3, 0x84,
	0x04, 0x15, 0x97, 0xdf, 0xc2, 0x2f, 0xe1, 0x57, 0xa1, 0xd9, 0xd9, 0x5d, 0xdf, 0x66, 0x7d, 0x49,
	0x05, 0xe2, 0xc9, 0x73, 0xce, 0x9e, 0xdb, 0x7c, 0xe7, 0x3b, 0x67, 0x0c, 0x0f, 0x07, 0x34, 0xe4,
	0x61, 0xcb, 0x0d, 0x87, 0x94, 0xe1, 0xf8, 0xa7, 0x19, 0xe9, 0xd0, 0xfd, 0x5e, 0x68, 0xf7, 0x89,
	0x4b, 0x43, 0x9b, 0xd1, 0x6b, 0x5b, 0x7e, 0x32, 0x1e, 0xf7, 0xc2, 0xb0, 0xe7, 0xe3, 0x56, 0x64,
	0x72, 0x39, 0xec, 0xb6, 0x38, 0xe9, 0x63, 0xc6, 0x9d, 0xfe, 0x40, 0x7a, 0x99, 0xbf, 0xe7, 0xa1,
	0xf8, 0x3c, 0xb2, 0x45, 0x77, 0x21, 0x47, 0x3c, 0x5d, 0xab, 0x6b, 0x8d, 0x8a, 0x95, 0x23, 0x1e,
	0x42, 0xb0, 0x11, 0x38, 0x7d, 0xac, 0xe7, 0x22, 0x4d, 0x74, 0x16, 0x3a, 0xe6, 0x0f, 0x7b, 0x7a,
	0x5e, 0xea, 0xc4, 0x19, 0xd5, 0xa1, 0xea, 0x61, 0xe6, 0x52, 0x32, 0xe0, 0x24, 0x0c, 0xf4, 0x8d,
	0xe8, 0xd3, 0xa4, 0x0a, 0xe9, 0x50, 0xba, 0x26, 0x8c, 0x5c, 0xfa, 0x58, 0x2f, 0xd4, 0xb5, 0x46,
	0xd9, 0x4a, 0x44, 0x74, 0x00, 0x05, 0xc6, 0x1d, 0xca, 0xf5, 0x62, 0x5d, 0x6b, 0x54, 0xdb, 0x46,
	0x53, 0xd6, 0xdb, 0x4c, 0xea, 0x6d, 0xbe, 0x4a, 0xea, 0xb5, 0xa4, 0x21, 0x7a, 0x0a, 0x79, 0x1c,
	0x78, 0x7a, 0x69, 0xa9, 0xbd, 0x30, 0x43, 0x47, 0x00, 0x2e, 0xc5, 0x0e, 0xc7, 0x9e, 0xed, 0x70,
	0xbd, 0xbc, 0xd4, 0xa9, 0x12, 0x5b, 0x1f, 0x73, 0xe1, 0x3a, 0x1c, 0x78, 0x89, 0x6b, 0x65, 0xb9,
	0x6b, 0x6c, 0x7d, 0xcc, 0xd1, 0x03, 0x28, 0x84, 0xd4, 0xc3, 0x54, 0x87, 0xba, 0xd6, 0xa8, 0x59,
	0x52, 0x40, 0x7b, 0x00, 0xae, 0xc3, 0x71, 0x2f, 0xa4, 0x04, 0x33, 0xbd, 0x5a, 0xcf, 0x37, 0x2a,
	0xd6, 0x84, 0xc6, 0xfc, 0x33, 0x07, 0xe5, 0xe7, 0x52, 0x1c, 0xfd, 0x8b, 0xcd, 0x48, 0x8b, 0x2b,
	0x4c, 0x16, 0x37, 0xd1, 0xa2, 0xe2, 0x74, 0x8b, 0xa6, 0x21, 0x2c, 0xdd, 0x1e, 0xc2, 0xf2, 0x1a,
	0x10, 0x9a, 0x5f, 0x41, 0x49, 0xd2, 0x92, 0xa1, 0xcf, 0xa0, 0x24, 0xd9, 0xcc, 0x74, 0xad, 0x9e,
	0x6f, 0x54, 0xdb, 0x3b, 0x4d, 0x05, 0xd5, 0x9b, 0xd2, 0xdc, 0x4a, 0x6c, 0xcd, 0x7d, 0x28, 0x5a,
	0x98, 0x0d, 0x7d, 0x8e, 0x3e, 0x80, 0x1a, 0x0d, 0x6f, 0x98, 0x8d, 0xbb, 0x5d, 0xec, 0x72, 0x2c,
	0x61, 0xdd, 0xb0, 0xde, 0x13, 0xca, 0xb3, 0x58, 0x67, 0x9e, 0xc3, 0x83, 0x6f, 0x06, 0x0c, 0x53,
	0x1e, 0xa7, 0xb5, 0xf0, 0x9b, 0x21, 0x66, 0xfc, 0xb6, 0xd9, 0xcf, 0x61, 0x73, 0x26, 0x1c, 0x1b,
	0x84, 0x01, 0xc3, 0x02, 0xe8, 0xf8, 0x96, 0x51, 0x19, 0x35, 0x2b, 0x11, 0x91, 0x01, 0x65, 0x12,
	0x08, 0x17, 0xec, 0x45, 0x6d, 0xae, 0x59, 0xa9, 0x6c, 0xbe, 0x82, 0x9d, 0x97, 0x38, 0x89, 0x75,
	0x32, 0x7a, 0x41, 0x7c, 0x8e, 0xe9, 0x38, 0xe8, 0x2d, 0x8b, 0xfc, 0x35, 0x07, 0x15, 0x19, 0xea,
	0x02, 0x73, 0x74, 0x0f, 0xf2, 0xc4, 0x93, 0x01, 0x2a, 0x96, 0x38, 0xa2, 0xc7, 0x50, 0xe5, 0xf8,
	0x47, 0x6e, 0x33, 0xec, 0x50, 0xf7, 0x2a, 0xe6, 0x1e, 0x08, 0xd5, 0x45, 0xa4, 0x11, 0x5c, 0x12,
	0x4c, 0x64, 0x7a, 0x3e, 0x72, 0x92, 0x82, 0xd0, 0x0a, 0x2e, 0x32, 0x7d, 0x43, 0x6a, 0x23, 0x61,
	0x3c, 0xea, 0x85, 0x35, 0x47, 0xbd, 0xb8, 0xda, 0xa8, 0x1f, 0x8e, 0x19, 0x2c, 0x49, 0xba, 0xa7,
	0xc4, 0xe0, 0x24, 0x0c, 0xfd, 0x17, 0x04, 0xfb, 0x5e, 0xca, 0x70, 0xf3, 0x08, 0x2a, 0xa9, 0x56,
	0x14, 0x7f, 0xed, 0xf8, 0x43, 0x1c, 0x75, 0xa7, 0x6c, 0x49, 0x01, 0x6d, 0x41, 0x91, 0xf4, 0x82,
	0x90, 0xca, 0x01, 0x2c, 0x5b, 0xb1, 0x64, 0xfe, 0x00, 0x86, 0xb2, 0x2f, 0x92, 0x3b, 0x5f, 0x02,
	0x74, 0x23, 0x8d, 0xcd, 0x30, 0x8f, 0x02, 0x66, 0x55, 0x95, 0x76, 0xc1, 0xaa, 0x74, 0x93, 0xa3,
	0xb9, 0x0f, 0x0f, 0x4f, 0xb1, 0x8f, 0x39, 0x4e, 0xe3, 0x77, 0x4e, 0xd3, 0xd8, 0x73, 0xdd, 0x32,
	0x3f, 0x07, 0x43, 0x65, 0x3e, 0xe6, 0x1d, 0xc5, 0xfd, 0xf0, 0x7a, 0xcc, 0xbb, 0x58, 0x34, 0xff,
	0xd2, 0xe0, 0xfd, 0x64, 0xef, 0xfc, 0x67, 0x6c, 0x38, 0x9c, 0x7e, 0x12, 0xd6, 0xe8, 0xd6, 0x77,
	0xb0, 0x1d, 0x4f, 0x56, 0xba, 0x3a, 0x27, 0xf0, 0x9e, 0xd8, 0xb0, 0x72, 0x12, 0x76, 0xd5, 0x93,
	0x10, 0xdf, 0x77, 0x6a, 0x01, 0x7f, 0x0d, 0xfa, 0x7c, 0xe4, 0x77, 0x1a, 0xdb, 0x2e, 0xec, 0x0a,
	0x7a, 0xa4, 0xe1, 0xe6, 0x18, 0x72, 0xa6, 0x60, 0xc8, 0x87, 0x0b, 0x2b, 0x56, 0x32, 0xc5, 0x86,
	0xbd, 0xac, 0x3c, 0x71, 0xfd, 0xef, 0x08, 0xcd, 0x01, 0x3c, 0x8a, 0xb9, 0x35, 0x91, 0x63, 0x21,
	0x1b, 0x8f, 0x60, 0x37, 0xc3, 0x63, 0x29, 0x21, 0xff, 0xc8, 0xc1, 0xf6, 0x31, 0x63, 0xa4, 0x17,
	0xcc, 0xb7, 0xf8, 0x37, 0x0d, 0x76, 0x64, 0xa1, 0x36, 0xf1, 0xec, 0x1b, 0xc2, 0xaf, 0xec, 0xb8,
	0xcc, 0x91, 0x9d, 0x54, 0x50, 0x6d, 0x77, 0x94, 0x37, 0xcb, 0x88, 0x19, 0xaf, 0xc5, 0x8e, 0xf7,
	0x2d, 0xe1, 0x57, 0xc9, 0xed, 0x3b, 0x1e, 0x3b, 0x0b, 0x38, 0x1d, 0x59, 0xdb, 0xae, 0xfa, 0xab,
	0xe1, 0xc1, 0xa3, 0x45, 0x8e, 0x02, 0x92, 0xd7, 0x78, 0x14, 0x3f, 0xe1, 0xe2, 0x88, 0x9a, 0xc9,
	0x6a, 0xc9, 0x45, 0x7d, 0xd6, 0x95, 0x45, 0x0a, 0x88, 0xa4, 0xd9, 0x17, 0xb9, 0x43, 0xcd, 0x7c,
	0x9b, 0x83, 0xcd, 0x8b, 0x51, 0xe0, 0xce, 0x23, 0xf1, 0x76, 0x25, 0x24, 0x5e, 0x2a, 0x93, 0x28,
	0x23, 0xfe, 0xaf, 0x71, 0xd8, 0x86, 0x7c, 0xe7, 0x94, 0x29, 0x78, 0xf6, 0x29, 0xe8, 0xf3, 0x7d,
	0x5d, 0x36, 0xb4, 0x66, 0x1b, 0xb6, 0x66, 0x31, 0x58, 0xe6, 0xd3, 0xfe, 0xbb, 0x04, 0x35, 0x79,
	0xd3, 0x73, 0x27, 0x70, 0x7a, 0x98, 0xa2, 0x2b, 0xa8, 0x4d, 0x3d, 0xf2, 0xe8, 0x23, 0xe5, 0x55,
	0x54, 0xff, 0x2b, 0x8c, 0x27, 0xab, 0x98, 0xca, 0x9a, 0xcc, 0x3b, 0xe8, 0x27, 0xb8, 0xaf, 0x78,
	0x67, 0x50, 0x4b, 0x19, 0x24, 0xfb, 0x45, 0x32, 0x0e, 0x56, 0x77, 0x48, 0x73, 0xdf, 0x00, 0x9a,
	0x7f, 0x57, 0x50, 0x53, 0x19, 0x29, 0xf3, 0xbd, 0x32, 0x5a, 0x2b, 0xdb, 0xa7, 0x89, 0xdf, 0xc0,
	0xbd, 0xd9, 0x7d, 0x8c, 0x9e, 0x2e, 0x82, 0x6d, 0x96, 0xd1, 0xc6, 0xfe, 0x8a, 0xd6, 0x69, 0xca,
	0x5f, 0x34, 0xd8, 0x52, 0x6f, 0x52, 0xd4, 0xce, 0x84, 0x2e, 0x73, 0xbd, 0x1b, 0xcf, 0xd6, 0xf2,
	0x49, 0xab, 0xf8, 0x59, 0x83, 0x4d, 0xe5, 0xf2, 0x44, 0x9f, 0x2c, 0x42, 0x51, 0xb9, 0x9a, 0x8d,
	0xf6, 0x3a, 0x2e, 0x93, 0xd8, 0xcf, 0x8e, 0x55, 0x06, 0xf6, 0x19, 0x5b, 0x35, 0x03, 0xfb, 0xac,
	0x59, 0x35, 0xef, 0xa0, 0xd7, 0x70, 0x77, 0x7a, 0x26, 0xd1, 0x93, 0xd5, 0x97, 0x97, 0xf1, 0xf1,
	0x4a, 0xb6, 0x49, 0xb2, 0x93, 0xf2, 0xf7, 0x45, 0x69, 0x72, 0x59, 0x8c, 0xfe, 0x50, 0x3e, 0xfb,
	0x27, 0x00, 0x00, 0xff, 0xff, 0x35, 0xef, 0xdc, 0x15, 0x5b, 0x0f, 0x00, 0x00,
}
