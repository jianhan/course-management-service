// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/courses/courses.proto

/*
Package courses is a generated protocol buffer package.

It is generated from these files:
	proto/courses/courses.proto

It has these top-level messages:
	Course
	FilterSet
	UpsertCoursesRequest
	GetCoursesByFiltersRequest
	GetCoursesByFiltersResponse
	DeleteCoursesByFiltersRequest
	DeleteCoursesByFiltersResponse
*/
package courses

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import go_micro_srv_cm_mysql "github.com/jianhan/course-management-service/proto/mysql"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Course defines data structure of Course.
type Course struct {
	// @inject_tag: bson:"_id,omitempty"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty" bson:"_id,omitempty"`
	// @inject_tag: validate:"required"
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty" validate:"required"`
	Slug string `protobuf:"bytes,3,opt,name=slug" json:"slug,omitempty"`
	// @inject_tag: bson:"display_order,omitempty"
	DisplayOrder uint64 `protobuf:"varint,4,opt,name=display_order,json=displayOrder" json:"display_order,omitempty" bson:"display_order,omitempty"`
	// @inject_tag: validate:"required"
	Description string `protobuf:"bytes,5,opt,name=description" json:"description,omitempty" validate:"required"`
	Visible     bool   `protobuf:"varint,6,opt,name=visible" json:"visible,omitempty"`
	// @inject_tag: validate:"required"
	Start *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=start" json:"start,omitempty" validate:"required"`
	// @inject_tag: validate:"required"
	End *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=end" json:"end,omitempty" validate:"required"`
	// @inject_tag: bson:"created_at"
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt" json:"created_at,omitempty" bson:"created_at"`
	// @inject_tag: bson:"updated_at"
	UpdatedAt  *google_protobuf.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty" bson:"updated_at"`
	Categories map[string]string          `protobuf:"bytes,11,rep,name=categories" json:"categories,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Course) Reset()                    { *m = Course{} }
func (m *Course) String() string            { return proto.CompactTextString(m) }
func (*Course) ProtoMessage()               {}
func (*Course) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Course) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Course) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Course) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *Course) GetDisplayOrder() uint64 {
	if m != nil {
		return m.DisplayOrder
	}
	return 0
}

func (m *Course) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Course) GetVisible() bool {
	if m != nil {
		return m.Visible
	}
	return false
}

func (m *Course) GetStart() *google_protobuf.Timestamp {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *Course) GetEnd() *google_protobuf.Timestamp {
	if m != nil {
		return m.End
	}
	return nil
}

func (m *Course) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Course) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Course) GetCategories() map[string]string {
	if m != nil {
		return m.Categories
	}
	return nil
}

// FilterSet contains data for filtering courses.
type FilterSet struct {
	Ids        []string                         `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
	TextSearch string                           `protobuf:"bytes,2,opt,name=text_search,json=textSearch" json:"text_search,omitempty"`
	Names      []string                         `protobuf:"bytes,3,rep,name=names" json:"names,omitempty"`
	Slugs      []string                         `protobuf:"bytes,4,rep,name=slugs" json:"slugs,omitempty"`
	Start      *google_protobuf.Timestamp       `protobuf:"bytes,5,opt,name=start" json:"start,omitempty"`
	End        *google_protobuf.Timestamp       `protobuf:"bytes,6,opt,name=end" json:"end,omitempty"`
	Visible    *go_micro_srv_cm_mysql.BoolField `protobuf:"bytes,7,opt,name=visible" json:"visible,omitempty"`
}

func (m *FilterSet) Reset()                    { *m = FilterSet{} }
func (m *FilterSet) String() string            { return proto.CompactTextString(m) }
func (*FilterSet) ProtoMessage()               {}
func (*FilterSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FilterSet) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *FilterSet) GetTextSearch() string {
	if m != nil {
		return m.TextSearch
	}
	return ""
}

func (m *FilterSet) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *FilterSet) GetSlugs() []string {
	if m != nil {
		return m.Slugs
	}
	return nil
}

func (m *FilterSet) GetStart() *google_protobuf.Timestamp {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *FilterSet) GetEnd() *google_protobuf.Timestamp {
	if m != nil {
		return m.End
	}
	return nil
}

func (m *FilterSet) GetVisible() *go_micro_srv_cm_mysql.BoolField {
	if m != nil {
		return m.Visible
	}
	return nil
}

// UpsertCoursesRequest contains data when upserts courses.
type UpsertCoursesRequest struct {
	Courses          []*Course `protobuf:"bytes,1,rep,name=courses" json:"courses,omitempty"`
	UpsertCategories bool      `protobuf:"varint,2,opt,name=upsert_categories,json=upsertCategories" json:"upsert_categories,omitempty"`
}

func (m *UpsertCoursesRequest) Reset()                    { *m = UpsertCoursesRequest{} }
func (m *UpsertCoursesRequest) String() string            { return proto.CompactTextString(m) }
func (*UpsertCoursesRequest) ProtoMessage()               {}
func (*UpsertCoursesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UpsertCoursesRequest) GetCourses() []*Course {
	if m != nil {
		return m.Courses
	}
	return nil
}

func (m *UpsertCoursesRequest) GetUpsertCategories() bool {
	if m != nil {
		return m.UpsertCategories
	}
	return false
}

// GetCoursesByFiltersRequest contains fields when querying for courses
// according to filter set.
type GetCoursesByFiltersRequest struct {
	FilterSet  *FilterSet                        `protobuf:"bytes,1,opt,name=filter_set,json=filterSet" json:"filter_set,omitempty"`
	Pagination *go_micro_srv_cm_mysql.Pagination `protobuf:"bytes,8,opt,name=pagination" json:"pagination,omitempty"`
	Sort       *go_micro_srv_cm_mysql.Sort       `protobuf:"bytes,9,opt,name=sort" json:"sort,omitempty"`
}

func (m *GetCoursesByFiltersRequest) Reset()                    { *m = GetCoursesByFiltersRequest{} }
func (m *GetCoursesByFiltersRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCoursesByFiltersRequest) ProtoMessage()               {}
func (*GetCoursesByFiltersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetCoursesByFiltersRequest) GetFilterSet() *FilterSet {
	if m != nil {
		return m.FilterSet
	}
	return nil
}

func (m *GetCoursesByFiltersRequest) GetPagination() *go_micro_srv_cm_mysql.Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *GetCoursesByFiltersRequest) GetSort() *go_micro_srv_cm_mysql.Sort {
	if m != nil {
		return m.Sort
	}
	return nil
}

// GetCoursesByFiltersResponse contains responses data for courses.
type GetCoursesByFiltersResponse struct {
	Courses []*Course `protobuf:"bytes,1,rep,name=courses" json:"courses,omitempty"`
}

func (m *GetCoursesByFiltersResponse) Reset()                    { *m = GetCoursesByFiltersResponse{} }
func (m *GetCoursesByFiltersResponse) String() string            { return proto.CompactTextString(m) }
func (*GetCoursesByFiltersResponse) ProtoMessage()               {}
func (*GetCoursesByFiltersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetCoursesByFiltersResponse) GetCourses() []*Course {
	if m != nil {
		return m.Courses
	}
	return nil
}

// DeleteCoursesByFiltersRequest represent request data structure for deleting
// courses by filters.
type DeleteCoursesByFiltersRequest struct {
	FilterSet *FilterSet `protobuf:"bytes,1,opt,name=filter_set,json=filterSet" json:"filter_set,omitempty"`
}

func (m *DeleteCoursesByFiltersRequest) Reset()                    { *m = DeleteCoursesByFiltersRequest{} }
func (m *DeleteCoursesByFiltersRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteCoursesByFiltersRequest) ProtoMessage()               {}
func (*DeleteCoursesByFiltersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DeleteCoursesByFiltersRequest) GetFilterSet() *FilterSet {
	if m != nil {
		return m.FilterSet
	}
	return nil
}

// DeleteCoursesByFiltersResponse contains data when courses are deleted.
type DeleteCoursesByFiltersResponse struct {
	Deleted int64 `protobuf:"varint,1,opt,name=deleted" json:"deleted,omitempty"`
}

func (m *DeleteCoursesByFiltersResponse) Reset()                    { *m = DeleteCoursesByFiltersResponse{} }
func (m *DeleteCoursesByFiltersResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteCoursesByFiltersResponse) ProtoMessage()               {}
func (*DeleteCoursesByFiltersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DeleteCoursesByFiltersResponse) GetDeleted() int64 {
	if m != nil {
		return m.Deleted
	}
	return 0
}

func init() {
	proto.RegisterType((*Course)(nil), "go.micro.srv.cm.courses.Course")
	proto.RegisterType((*FilterSet)(nil), "go.micro.srv.cm.courses.FilterSet")
	proto.RegisterType((*UpsertCoursesRequest)(nil), "go.micro.srv.cm.courses.UpsertCoursesRequest")
	proto.RegisterType((*GetCoursesByFiltersRequest)(nil), "go.micro.srv.cm.courses.GetCoursesByFiltersRequest")
	proto.RegisterType((*GetCoursesByFiltersResponse)(nil), "go.micro.srv.cm.courses.GetCoursesByFiltersResponse")
	proto.RegisterType((*DeleteCoursesByFiltersRequest)(nil), "go.micro.srv.cm.courses.DeleteCoursesByFiltersRequest")
	proto.RegisterType((*DeleteCoursesByFiltersResponse)(nil), "go.micro.srv.cm.courses.DeleteCoursesByFiltersResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Courses service

type CoursesClient interface {
	UpsertCourses(ctx context.Context, in *UpsertCoursesRequest, opts ...client.CallOption) (*go_micro_srv_cm_mysql.UpsertResult, error)
	GetCoursesByFilters(ctx context.Context, in *GetCoursesByFiltersRequest, opts ...client.CallOption) (*GetCoursesByFiltersResponse, error)
	DeleteCoursesByFilters(ctx context.Context, in *DeleteCoursesByFiltersRequest, opts ...client.CallOption) (*DeleteCoursesByFiltersResponse, error)
}

type coursesClient struct {
	c           client.Client
	serviceName string
}

func NewCoursesClient(serviceName string, c client.Client) CoursesClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.cm.courses"
	}
	return &coursesClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *coursesClient) UpsertCourses(ctx context.Context, in *UpsertCoursesRequest, opts ...client.CallOption) (*go_micro_srv_cm_mysql.UpsertResult, error) {
	req := c.c.NewRequest(c.serviceName, "Courses.UpsertCourses", in)
	out := new(go_micro_srv_cm_mysql.UpsertResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursesClient) GetCoursesByFilters(ctx context.Context, in *GetCoursesByFiltersRequest, opts ...client.CallOption) (*GetCoursesByFiltersResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Courses.GetCoursesByFilters", in)
	out := new(GetCoursesByFiltersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursesClient) DeleteCoursesByFilters(ctx context.Context, in *DeleteCoursesByFiltersRequest, opts ...client.CallOption) (*DeleteCoursesByFiltersResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Courses.DeleteCoursesByFilters", in)
	out := new(DeleteCoursesByFiltersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Courses service

type CoursesHandler interface {
	UpsertCourses(context.Context, *UpsertCoursesRequest, *go_micro_srv_cm_mysql.UpsertResult) error
	GetCoursesByFilters(context.Context, *GetCoursesByFiltersRequest, *GetCoursesByFiltersResponse) error
	DeleteCoursesByFilters(context.Context, *DeleteCoursesByFiltersRequest, *DeleteCoursesByFiltersResponse) error
}

func RegisterCoursesHandler(s server.Server, hdlr CoursesHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Courses{hdlr}, opts...))
}

type Courses struct {
	CoursesHandler
}

func (h *Courses) UpsertCourses(ctx context.Context, in *UpsertCoursesRequest, out *go_micro_srv_cm_mysql.UpsertResult) error {
	return h.CoursesHandler.UpsertCourses(ctx, in, out)
}

func (h *Courses) GetCoursesByFilters(ctx context.Context, in *GetCoursesByFiltersRequest, out *GetCoursesByFiltersResponse) error {
	return h.CoursesHandler.GetCoursesByFilters(ctx, in, out)
}

func (h *Courses) DeleteCoursesByFilters(ctx context.Context, in *DeleteCoursesByFiltersRequest, out *DeleteCoursesByFiltersResponse) error {
	return h.CoursesHandler.DeleteCoursesByFilters(ctx, in, out)
}

func init() { proto.RegisterFile("proto/courses/courses.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 726 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x4d, 0x6f, 0xdb, 0x46,
	0x14, 0x34, 0x45, 0x7d, 0x58, 0x4f, 0x75, 0xeb, 0x6e, 0x8d, 0x96, 0xa0, 0xd1, 0x9a, 0xa5, 0x2f,
	0x02, 0x5a, 0x53, 0x85, 0x5c, 0xf4, 0xc3, 0x40, 0x0f, 0xb2, 0x5d, 0xf7, 0xe8, 0x82, 0x6e, 0x81,
	0x20, 0x17, 0x81, 0x22, 0x9f, 0xe9, 0x4d, 0x48, 0x2e, 0xbd, 0xbb, 0x14, 0xa2, 0x4b, 0x0e, 0x09,
	0x90, 0x1c, 0xf2, 0xf3, 0xf2, 0x87, 0x02, 0xee, 0x92, 0xb2, 0x92, 0x88, 0x51, 0x8c, 0x20, 0x17,
	0x89, 0x3b, 0x9c, 0x79, 0x5c, 0xce, 0xcc, 0x12, 0xf6, 0x73, 0xce, 0x24, 0x1b, 0x85, 0xac, 0xe0,
	0x02, 0x45, 0xfd, 0xef, 0x29, 0x94, 0x7c, 0x17, 0x33, 0x2f, 0xa5, 0x21, 0x67, 0x9e, 0xe0, 0x73,
	0x2f, 0x4c, 0xbd, 0xea, 0xb6, 0x7d, 0x10, 0x33, 0x16, 0x27, 0x38, 0x52, 0xb4, 0x59, 0x71, 0x3d,
	0x92, 0x34, 0x45, 0x21, 0x83, 0x34, 0xd7, 0x4a, 0xfb, 0x3c, 0xa6, 0xf2, 0xa6, 0x98, 0x79, 0x21,
	0x4b, 0x47, 0x8f, 0x68, 0x90, 0xdd, 0x04, 0x59, 0x35, 0xfb, 0x28, 0x0d, 0xb2, 0x20, 0xc6, 0x14,
	0x33, 0x79, 0x24, 0x90, 0xcf, 0x69, 0x58, 0x8d, 0x19, 0xa5, 0x0b, 0x71, 0x9b, 0xe8, 0x5f, 0x3d,
	0xc5, 0x7d, 0xd9, 0x86, 0xee, 0x99, 0x52, 0x91, 0x2f, 0xa1, 0x45, 0x23, 0xcb, 0x70, 0x8c, 0x61,
	0xdf, 0x6f, 0xd1, 0x88, 0x10, 0x68, 0x67, 0x41, 0x8a, 0x56, 0x4b, 0x21, 0xea, 0xba, 0xc4, 0x44,
	0x52, 0xc4, 0x96, 0xa9, 0xb1, 0xf2, 0x9a, 0x1c, 0xc2, 0x4e, 0x44, 0x45, 0x9e, 0x04, 0x8b, 0x29,
	0xe3, 0x11, 0x72, 0xab, 0xed, 0x18, 0xc3, 0xb6, 0xff, 0x45, 0x05, 0x5e, 0x96, 0x18, 0x71, 0x60,
	0x10, 0xa1, 0x08, 0x39, 0xcd, 0x25, 0x65, 0x99, 0xd5, 0x51, 0xfa, 0x55, 0x88, 0x58, 0xd0, 0x9b,
	0x53, 0x41, 0x67, 0x09, 0x5a, 0x5d, 0xc7, 0x18, 0x6e, 0xfb, 0xf5, 0x92, 0xfc, 0x02, 0x1d, 0x21,
	0x03, 0x2e, 0xad, 0x9e, 0x63, 0x0c, 0x07, 0x63, 0xdb, 0xd3, 0xd6, 0x78, 0xb5, 0x35, 0xde, 0x7f,
	0xb5, 0x35, 0xbe, 0x26, 0x92, 0x9f, 0xc1, 0xc4, 0x2c, 0xb2, 0xb6, 0x37, 0xf2, 0x4b, 0x1a, 0xf9,
	0x13, 0x20, 0xe4, 0x18, 0x48, 0x8c, 0xa6, 0x81, 0xb4, 0xfa, 0x1b, 0x45, 0xfd, 0x8a, 0x3d, 0x91,
	0xa5, 0xb4, 0xc8, 0xa3, 0x5a, 0x0a, 0x9b, 0xa5, 0x15, 0x7b, 0x22, 0xc9, 0x25, 0x40, 0x18, 0x48,
	0x8c, 0x19, 0xa7, 0x28, 0xac, 0x81, 0x63, 0x0e, 0x07, 0xe3, 0x91, 0xd7, 0x50, 0x07, 0x4f, 0x67,
	0xe4, 0x9d, 0x2d, 0x15, 0x7f, 0x67, 0x92, 0x2f, 0xfc, 0x95, 0x11, 0xf6, 0x5f, 0xf0, 0xd5, 0x3b,
	0xb7, 0xc9, 0x2e, 0x98, 0x8f, 0x71, 0x51, 0x65, 0x5a, 0x5e, 0x92, 0x3d, 0xe8, 0xcc, 0x83, 0xa4,
	0xa8, 0x53, 0xd5, 0x8b, 0x93, 0xd6, 0x1f, 0x86, 0xfb, 0xa2, 0x05, 0xfd, 0x0b, 0x9a, 0x48, 0xe4,
	0x57, 0x28, 0x4b, 0x25, 0x8d, 0x84, 0x65, 0x38, 0x66, 0xa9, 0xa4, 0x91, 0x20, 0x07, 0x30, 0x90,
	0xf8, 0x44, 0x4e, 0x05, 0x06, 0x3c, 0xbc, 0xa9, 0xf4, 0x50, 0x42, 0x57, 0x0a, 0x29, 0x47, 0x97,
	0x1d, 0x11, 0x96, 0xa9, 0x44, 0x7a, 0x51, 0xa2, 0x65, 0x4b, 0x84, 0xd5, 0xd6, 0xa8, 0x5a, 0xdc,
	0x45, 0xda, 0xb9, 0x67, 0xa4, 0xdd, 0x8f, 0x8b, 0xf4, 0xe4, 0xae, 0x4c, 0xba, 0x34, 0xce, 0x7b,
	0xce, 0xea, 0x53, 0x70, 0xca, 0x58, 0x72, 0x41, 0x31, 0x89, 0x96, 0x75, 0x73, 0x9f, 0xc2, 0xde,
	0xff, 0xb9, 0x40, 0x2e, 0xb5, 0xe7, 0xc2, 0xc7, 0xdb, 0x02, 0x45, 0x99, 0x75, 0xaf, 0x4a, 0x43,
	0xd9, 0x32, 0x18, 0x1f, 0x6c, 0x48, 0xcb, 0xaf, 0xf9, 0xe4, 0x27, 0xf8, 0xba, 0x50, 0x23, 0xa7,
	0x2b, 0x91, 0xb7, 0x54, 0xcb, 0x77, 0xf5, 0x8d, 0xbb, 0xe4, 0xdc, 0xd7, 0x06, 0xd8, 0xff, 0x60,
	0xfd, 0xf4, 0xd3, 0x85, 0x0e, 0x65, 0xb9, 0x8d, 0x09, 0xc0, 0xb5, 0x42, 0xa6, 0x02, 0xa5, 0x8a,
	0x76, 0x30, 0x76, 0x1b, 0x77, 0xb2, 0x4c, 0xd4, 0xef, 0x5f, 0x2f, 0xc3, 0x9d, 0x00, 0xe4, 0x41,
	0x4c, 0xb3, 0x40, 0x9d, 0x45, 0x7d, 0x4a, 0x7e, 0x6c, 0x30, 0xe8, 0xdf, 0x25, 0xd1, 0x5f, 0x11,
	0x91, 0x11, 0xb4, 0x05, 0xe3, 0xf5, 0x69, 0xd9, 0x6f, 0x10, 0x5f, 0x31, 0x2e, 0x7d, 0x45, 0x74,
	0x1f, 0xc0, 0xfe, 0xda, 0x97, 0x12, 0x39, 0xcb, 0x04, 0x7e, 0x82, 0xb9, 0xee, 0x0c, 0xbe, 0x3f,
	0xc7, 0x04, 0x25, 0x7e, 0x3e, 0xc7, 0xdc, 0x13, 0xf8, 0xa1, 0xe9, 0x19, 0xd5, 0x0b, 0x58, 0xd0,
	0x8b, 0x14, 0x43, 0x7f, 0x42, 0x4d, 0xbf, 0x5e, 0x8e, 0x9f, 0x9b, 0xd0, 0xab, 0x64, 0x04, 0x61,
	0xe7, 0xad, 0x6e, 0x91, 0xa3, 0xc6, 0x7d, 0xac, 0xeb, 0xa0, 0x7d, 0xd8, 0x60, 0xb4, 0x26, 0xfb,
	0x28, 0x8a, 0x44, 0xba, 0x5b, 0xe4, 0x99, 0x01, 0xdf, 0xac, 0x71, 0x9b, 0x1c, 0x37, 0x3e, 0xad,
	0xb9, 0x70, 0xf6, 0xaf, 0xf7, 0x13, 0x69, 0x3f, 0xdc, 0x2d, 0xf2, 0xca, 0x80, 0x6f, 0xd7, 0x9b,
	0x46, 0x7e, 0x6b, 0x1c, 0xf9, 0xc1, 0x24, 0xed, 0xdf, 0xef, 0xad, 0xab, 0x77, 0x73, 0xda, 0x7f,
	0x58, 0x17, 0x66, 0xd6, 0x55, 0x5f, 0x8d, 0xe3, 0x37, 0x01, 0x00, 0x00, 0xff, 0xff, 0x06, 0xa1,
	0xd4, 0x1a, 0x99, 0x07, 0x00, 0x00,
}
