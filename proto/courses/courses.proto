syntax = "proto3";

package go.micro.srv.cm.courses;
option go_package="courses";

import "google/protobuf/timestamp.proto";
import "github.com/jianhan/course-management-service/proto/mysql/mysql.proto";

// Service declares all RPC calls for courses related functions.
service Courses {
	rpc UpsertCourses(UpsertCoursesRequest) returns (go.micro.srv.cm.mysql.UpsertResult) {}
	rpc GetCoursesByFilters(GetCoursesByFiltersRequest) returns (GetCoursesByFiltersResponse) {}
	rpc DeleteCoursesByFilters(DeleteCoursesByFiltersRequest) returns (DeleteCoursesByFiltersResponse) {}
}

// Course defines data structure of Course.
message Course {
	// @inject_tag: valid:"uuid,optional~Invalid ID format."
	string id = 1;
	// @inject_tag: valid:"required~Name of course is required."
	string name = 2;
	string slug = 3;
	// @inject_tag: valid:"int~Display order is not a valid integer."
	uint64 display_order = 4;
	// @inject_tag: valid:"required~Description is required."
	string description = 5;
	bool visible = 6;
	// @inject_tag: valid:"required~Start date and time is required."
	google.protobuf.Timestamp start = 7;
	// @inject_tag: valid:"required~End date and time is required."
	google.protobuf.Timestamp end = 8;
	google.protobuf.Timestamp created_at = 9;
	google.protobuf.Timestamp updated_at = 10;
	map<string, string> categories = 11;
}

// FilterSet contains data for filtering courses.
message FilterSet {
  // @inject_tag: valid:"length:(1),optional~Must provide at least one ID."
	repeated string ids = 1;
	string text_search = 2;
	// @inject_tag: valid:"length:(1),optional~Must provide at least one name."
	repeated string names = 3;
	// @inject_tag: valid:"length:(1),optional~Must provide at least one slug."
	repeated string slugs = 4;
	google.protobuf.Timestamp start = 5;
	google.protobuf.Timestamp end = 6;
	go.micro.srv.cm.mysql.BoolField visible = 7;
}

// UpsertCoursesRequest contains data when upserts courses.
message UpsertCoursesRequest {
	// @inject_tag: valid:"length:(1)~Please provide at least one course to update."
	repeated Course courses = 1;
	bool upsert_categories = 2;
}

// GetCoursesByFiltersRequest contains fields when querying for courses
// according to filter set.
message GetCoursesByFiltersRequest {
	FilterSet filter_set = 1;
	go.micro.srv.cm.mysql.Pagination pagination = 8;
	go.micro.srv.cm.mysql.Sort sort = 9;
}

// GetCoursesByFiltersResponse contains responses data for courses.
message GetCoursesByFiltersResponse {
	repeated Course courses = 1;
}

// DeleteCoursesByFiltersRequest represent request data structure for deleting
// courses by filters.
message DeleteCoursesByFiltersRequest {
	FilterSet filter_set = 1;
}

// DeleteCoursesByFiltersResponse contains data when courses are deleted.
message DeleteCoursesByFiltersResponse {
	int64 deleted = 1;
}
