// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/course_management.proto

/*
Package management is a generated protocol buffer package.

It is generated from these files:
	proto/course_management.proto

It has these top-level messages:
*/
package management

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import go_micro_srv_course_management "course/management"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CourseManagement service

type CourseManagementClient interface {
	// Courses
	UpsertCourses(ctx context.Context, in *go_micro_srv_course_management.UpsertCoursesRequest, opts ...client.CallOption) (*go_micro_srv_course_management.UpsertResult, error)
	GetCoursesByFilters(ctx context.Context, in *go_micro_srv_course_management.GetCoursesByFiltersRequest, opts ...client.CallOption) (*go_micro_srv_course_management.GetCoursesByFiltersResponse, error)
	DeleteCoursesByFilters(ctx context.Context, in *go_micro_srv_course_management.DeleteCoursesByFiltersRequest, opts ...client.CallOption) (*go_micro_srv_course_management.DeleteCoursesByFiltersResponse, error)
	// Categories
	UpsertCategories(ctx context.Context, in *go_micro_srv_course_management.UpsertCategoriesRequest, opts ...client.CallOption) (*go_micro_srv_course_management.UpsertResult, error)
}

type courseManagementClient struct {
	c           client.Client
	serviceName string
}

func NewCourseManagementClient(serviceName string, c client.Client) CourseManagementClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.course.management"
	}
	return &courseManagementClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *courseManagementClient) UpsertCourses(ctx context.Context, in *go_micro_srv_course_management.UpsertCoursesRequest, opts ...client.CallOption) (*go_micro_srv_course_management.UpsertResult, error) {
	req := c.c.NewRequest(c.serviceName, "CourseManagement.UpsertCourses", in)
	out := new(go_micro_srv_course_management.UpsertResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseManagementClient) GetCoursesByFilters(ctx context.Context, in *go_micro_srv_course_management.GetCoursesByFiltersRequest, opts ...client.CallOption) (*go_micro_srv_course_management.GetCoursesByFiltersResponse, error) {
	req := c.c.NewRequest(c.serviceName, "CourseManagement.GetCoursesByFilters", in)
	out := new(go_micro_srv_course_management.GetCoursesByFiltersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseManagementClient) DeleteCoursesByFilters(ctx context.Context, in *go_micro_srv_course_management.DeleteCoursesByFiltersRequest, opts ...client.CallOption) (*go_micro_srv_course_management.DeleteCoursesByFiltersResponse, error) {
	req := c.c.NewRequest(c.serviceName, "CourseManagement.DeleteCoursesByFilters", in)
	out := new(go_micro_srv_course_management.DeleteCoursesByFiltersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseManagementClient) UpsertCategories(ctx context.Context, in *go_micro_srv_course_management.UpsertCategoriesRequest, opts ...client.CallOption) (*go_micro_srv_course_management.UpsertResult, error) {
	req := c.c.NewRequest(c.serviceName, "CourseManagement.UpsertCategories", in)
	out := new(go_micro_srv_course_management.UpsertResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CourseManagement service

type CourseManagementHandler interface {
	// Courses
	UpsertCourses(context.Context, *go_micro_srv_course_management.UpsertCoursesRequest, *go_micro_srv_course_management.UpsertResult) error
	GetCoursesByFilters(context.Context, *go_micro_srv_course_management.GetCoursesByFiltersRequest, *go_micro_srv_course_management.GetCoursesByFiltersResponse) error
	DeleteCoursesByFilters(context.Context, *go_micro_srv_course_management.DeleteCoursesByFiltersRequest, *go_micro_srv_course_management.DeleteCoursesByFiltersResponse) error
	// Categories
	UpsertCategories(context.Context, *go_micro_srv_course_management.UpsertCategoriesRequest, *go_micro_srv_course_management.UpsertResult) error
}

func RegisterCourseManagementHandler(s server.Server, hdlr CourseManagementHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&CourseManagement{hdlr}, opts...))
}

type CourseManagement struct {
	CourseManagementHandler
}

func (h *CourseManagement) UpsertCourses(ctx context.Context, in *go_micro_srv_course_management.UpsertCoursesRequest, out *go_micro_srv_course_management.UpsertResult) error {
	return h.CourseManagementHandler.UpsertCourses(ctx, in, out)
}

func (h *CourseManagement) GetCoursesByFilters(ctx context.Context, in *go_micro_srv_course_management.GetCoursesByFiltersRequest, out *go_micro_srv_course_management.GetCoursesByFiltersResponse) error {
	return h.CourseManagementHandler.GetCoursesByFilters(ctx, in, out)
}

func (h *CourseManagement) DeleteCoursesByFilters(ctx context.Context, in *go_micro_srv_course_management.DeleteCoursesByFiltersRequest, out *go_micro_srv_course_management.DeleteCoursesByFiltersResponse) error {
	return h.CourseManagementHandler.DeleteCoursesByFilters(ctx, in, out)
}

func (h *CourseManagement) UpsertCategories(ctx context.Context, in *go_micro_srv_course_management.UpsertCategoriesRequest, out *go_micro_srv_course_management.UpsertResult) error {
	return h.CourseManagementHandler.UpsertCategories(ctx, in, out)
}

func init() { proto.RegisterFile("proto/course_management.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2d, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0xce, 0x2f, 0x2d, 0x2a, 0x4e, 0x8d, 0xcf, 0x4d, 0xcc, 0x4b, 0x4c, 0x4f, 0xcd,
	0x4d, 0xcd, 0x2b, 0xd1, 0x03, 0x8b, 0x0b, 0xc9, 0xa5, 0xe7, 0xeb, 0xe5, 0x66, 0x26, 0x17, 0xe5,
	0xeb, 0x15, 0x17, 0x95, 0xe9, 0x41, 0x54, 0xe9, 0x21, 0x54, 0x49, 0xc9, 0xa7, 0xe7, 0xe7, 0xa7,
	0xe7, 0xa4, 0xea, 0x83, 0x55, 0x27, 0x95, 0xa6, 0xe9, 0x97, 0x64, 0xe6, 0xa6, 0x16, 0x97, 0x24,
	0xe6, 0x16, 0x40, 0x0c, 0x90, 0x12, 0x42, 0x36, 0x1f, 0x22, 0x66, 0xb4, 0x95, 0x85, 0x4b, 0xc0,
	0x19, 0x2c, 0xe0, 0x0b, 0x37, 0x49, 0xa8, 0x94, 0x8b, 0x37, 0xb4, 0xa0, 0x38, 0xb5, 0xa8, 0x04,
	0x22, 0x53, 0x2c, 0x64, 0xa2, 0x87, 0xdf, 0x6e, 0x3d, 0x14, 0xe5, 0x41, 0xa9, 0x85, 0xa5, 0xa9,
	0xc5, 0x25, 0x52, 0x3a, 0xc4, 0xe9, 0x0a, 0x4a, 0x2d, 0x2e, 0xcd, 0x29, 0x51, 0x62, 0x10, 0x9a,
	0xc0, 0xc8, 0x25, 0xec, 0x9e, 0x0a, 0x33, 0xc5, 0xa9, 0xd2, 0x2d, 0x33, 0xa7, 0x24, 0xb5, 0xa8,
	0x58, 0xc8, 0x8a, 0x90, 0x39, 0x58, 0x34, 0xc1, 0xdc, 0x60, 0x4d, 0x96, 0xde, 0xe2, 0x82, 0xfc,
	0xbc, 0xe2, 0x54, 0x25, 0x06, 0xa1, 0x99, 0x8c, 0x5c, 0x62, 0x2e, 0xa9, 0x39, 0xa9, 0x25, 0xa9,
	0x18, 0xae, 0xb2, 0x25, 0x64, 0x32, 0x76, 0x7d, 0x30, 0x87, 0xd9, 0x91, 0xab, 0x1d, 0xee, 0xb6,
	0x6a, 0x2e, 0x01, 0x68, 0xb0, 0x27, 0x96, 0xa4, 0xa6, 0xe7, 0x17, 0x65, 0xa6, 0x16, 0x0b, 0x99,
	0x13, 0x19, 0x51, 0x70, 0x1d, 0x64, 0xc6, 0x95, 0x93, 0x70, 0x94, 0x20, 0x44, 0x8d, 0x3e, 0x42,
	0x4d, 0x12, 0x1b, 0x38, 0x4d, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x87, 0x16, 0x37, 0x7b,
	0xc9, 0x02, 0x00, 0x00,
}
